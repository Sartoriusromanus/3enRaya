


/**
 *
 * @author angelluis
 */
public class Modelo {
  
   private int turno=1;    // 1-> Jugador 1, 2-> Jugador 2
   private int ganador;  //1->Jugador 1, 2-> Jugador 2,3-> Empate
   private String ficha_X="X";
   private String ficha_0="0";
   private int ganadasAndroid=0,ganadasApple=0;
   private String tablero[][]=new String[3][3]; //Tablero para las fichas
   private boolean fin=false; 
   public Modelo(){
    for( int i=0 ;i<tablero.length;i++)
            for ( int j=0; j<tablero.length;j++)
                tablero[i][j]="";
   }
   //Metodo para jugar de nuevo
   public void jugarOtraVez(){
       for ( int i=0 ;i<tablero.length;i++)
            for ( int j=0; j<tablero.length;j++)
                tablero[i][j]="";
        
        ganador=0;
        turno=1;
        
   }    
    //Metodo para poner una ficha
   public int ponerFicha(int x,int y){
       if(turno==1){
          if(puedePoner(x,y)){
             tablero[x][y]="X"; 
            if(!ganador(ficha_X)){
              if(!empate()){
                turno=2;
                
              }else
                ganador=3 ;
             }else{
                ganador=1;
                ganadasAndroid++;
             } 
           
       }else if(turno==2){
           if(puedePoner(x,y)){
              tablero[x][y]="0";
            if(!ganador(ficha_0)){
              if(!empate()){
                turno=1;
                 
              }else
                ganador=3 ;
          }else{
                ganador=2;
                ganadasApple++;
          } 
          } 
       }
     }
       
       return ganador;
   }
    //Metodo para comprobar si la casilla esta vacia   
    public boolean puedePoner(int i,int j){
        return tablero[i][j].equals("");
    }
    //Metodo que devuelve el tablero
    public String[][] getTablero(){
        return tablero;
    }
    public int getTurno(){
        return turno;
    }
    
    //Metodo para determinar si hay ganador.
    public boolean ganador(String ficha){
        int i,j,contador;
        
        //Busqueda de ganador por filas
        for ( i=0 ;i<tablero.length;i++){
            contador=0;
            for (j=0; j<tablero.length;j++)
                if( tablero[i][j].equals(ficha))
                   contador++;
            if( contador == 3)
                 return true;
        }
        /*Busqueda de ganador por columnas. Igual que el anterior pero invertimos el orden de recorrido de los FOR
          para buscar por columna y no por fila
        */
         for (j=0; j<tablero.length;j++){
            contador=0;
            for ( i=0 ;i<tablero.length;i++)
                if( tablero[i][j].equals(ficha))
                 contador++;
            if( contador == 3)
                 return true;
        }
        //Diagonales
        if(tablero[0][0].equals(ficha) && tablero[1][1].equals(ficha) && tablero[2][2].equals(ficha) )
            return true;

        if(tablero[0][2].equals(ficha) && tablero[1][1].equals(ficha) && tablero[2][0].equals(ficha) )
            return true;

        return false;
        }
    
    //Metodo para saber si hay empate
    public boolean empate(){
        int i,j;
        for ( i=0 ;i<tablero.length;i++)
            for (j=0; j<tablero.length;j++)
                if( tablero[i][j].equals(""))
                    return false;
        return true;
    }
    
    //Metodo para procesar las coordenadas del click
    public int  obtenerColumna(int y){
        if(y>0 && y<=231)
            return 0;
        else if(y>231 && y<=431)
            return 1;
        else if(y>431 && y<=631)
            return 2;
        return -1;
    }
    
     //Metodo para procesar las coordenadas del click
    public int  obtenerFila(int x){
        if(x>0 && x<=207)
            return 0;
        else if(x>207 && x<=407)
            return 1;
        else if(x>407 && x<=607)
            return 2;
        return -1;
    }
    
    public int getGanadasAndroid(){
        return ganadasAndroid;
    }
    
    public int getGanadasApple(){
        return ganadasApple;
    }
}
 
       
        
 
       
  
